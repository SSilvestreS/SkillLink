name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  pull-requests: write

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '13'
  REDIS_VERSION: '7'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: skilllink_test
          POSTGRES_INITDB_ARGS: "--auth-host=md5"
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install redis-cli
        run: sudo apt-get update && sudo apt-get install -y redis-tools

      - name: Enable memory overcommit
        run: |
          sudo sysctl -w vm.overcommit_memory=1
          echo "Memory overcommit enabled for Redis"

      - name: Run linting
        working-directory: ./backend
        run: npm run lint
        continue-on-error: false

      - name: Run type checking
        working-directory: ./backend
        run: npx tsc --noEmit
        continue-on-error: false

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres -d skilllink_test; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "PostgreSQL not ready, attempt $i/10, retrying in 2s..."
            sleep 2
          done
          echo "PostgreSQL failed to start after 10 attempts"
          exit 1
        env:
          PGPASSWORD: postgres

      - name: Wait for Redis
        run: |
          echo "Waiting for Redis to be ready..."
          for i in {1..10}; do
            if redis-cli -h localhost -p 6379 ping > /dev/null 2>&1; then
              echo "Redis is ready!"
              exit 0
            fi
            echo "Redis not ready, attempt $i/10, retrying in 2s..."
            sleep 2
          done
          echo "Redis failed to start after 10 attempts"
          exit 1

      - name: Setup PostgreSQL Database
        run: |
          # Remover banco de dados se existir e criar novo
          psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS skilllink_test;"
          createdb -h localhost -U postgres -w skilllink_test
          # Verificar se o usuário postgres tem permissões
          psql -h localhost -U postgres -d skilllink_test -c "SELECT version();"
        env:
          PGPASSWORD: postgres

      - name: Verify Services
        run: |
          echo "=== Final verification of services ==="
          echo "Testing PostgreSQL connection..."
          psql -h localhost -U postgres -d skilllink_test -c "SELECT 'PostgreSQL is working' as status;"
          echo "Testing Redis connection..."
          redis-cli -h localhost -p 6379 ping
          echo "=== All services verified successfully ==="
        env:
          PGPASSWORD: postgres

      - name: Debug Environment Variables
        run: |
          echo "DB_USERNAME: $DB_USERNAME"
          echo "DB_PASSWORD: $DB_PASSWORD"
          echo "DB_DATABASE: $DB_DATABASE"
          echo "DB_HOST: $DB_HOST"
          echo "PGUSER: $PGUSER"
          echo "PGDATABASE: $PGDATABASE"
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: skilllink_test
          JWT_SECRET: test-secret-key
          JWT_EXPIRES_IN: 1h
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: skilllink_test
          PGHOST: localhost

      - name: Run all tests
        working-directory: ./backend
        run: timeout 300 npm test -- --config jest.config.js --verbose --runInBand --detectOpenHandles --forceExit
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: skilllink_test
          JWT_SECRET: test-secret-key
          JWT_EXPIRES_IN: 1h
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: skilllink_test
          PGHOST: localhost
        continue-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'
          channel: 'stable'

      - name: Install Flutter dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Build Flutter web
        working-directory: ./frontend
        run: flutter build web --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/build/web/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/skilllink-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/skilllink-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/skilllink-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/skilllink-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Adicionar comandos de deploy aqui
          # Exemplo: kubectl apply -f k8s/
          # Ou: docker-compose -f docker-compose.prod.yml up -d
